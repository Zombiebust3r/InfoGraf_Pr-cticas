#version 330 core

in vec3 normalVector;
in vec3 fragPosition;
in vec2 textureCoords;

struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float     shininess;
};  

uniform vec3 lightColor;
uniform vec3 lightPosition;
uniform vec3 cubeColor;
uniform vec3 cameraPosition;
uniform Material material;

out vec4 color;

void main() {	
	vec3 normalizedV = normalize(normalVector);
	
	float ambientStrength = 1.0f;
	float diffStrength = 1.0f;
	float specStrength = 1.0f;

	vec3 ambient = ambientStrength * vec3(texture(material.diffuse, textureCoords));

	vec3 L = normalize(lightPosition - fragPosition);
	float diff = max(dot(normalizedV, L), 0);
	vec3 diffuse = diffStrength * diff * vec3(texture(material.diffuse, textureCoords));

	vec3 V = normalize(cameraPosition - fragPosition);
	vec3 R = reflect(-L, normalizedV);
	float sp = pow(max(dot(R, V), 0), material.shininess);
	vec3 specular = specStrength * sp * vec3(texture(material.specular, textureCoords));
	
	float distance = length(lightPosition - fragPosition);
	vec3 ce = vec3(1, 0.3, 0.2);
	float attenuation = 1 / (ce.x * 1 + ce.y * distance + ce.z*pow(distance,2));
	
	vec3 result = (ambient + diffuse + specular)* attenuation;
	color = vec4(result, 1.0f);
	
}
